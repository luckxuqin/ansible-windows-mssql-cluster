--- example SQL script
--- Creates a database 'myDB' with a 'myAG' avail group
--- Database files are in the data / logs directory as labeled by the OS


--- First, pick up the disk volume names for data and logs

-- Enable Ole Automation
EXECUTE sp_configure 'show advanced options', 1
RECONFIGURE WITH OVERRIDE
GO
EXECUTE sp_configure 'Ole Automation Procedures', 1
RECONFIGURE WITH OVERRIDE
GO

-- Create function for filesystem volumes
-- Credit: Percy Reyes

USE [master]
GO
CREATE FUNCTION [dbo].[ufn_LogicalDiskDrives]()
RETURNS @DriveList Table
  (
   [DriveLetter]  CHAR(1)
  ,[VolumeName]  VARCHAR(255)
  ,[FileSystem]  VARCHAR(50)
  )
AS

BEGIN
  DECLARE @DriveLetter_ASCII_Code  INT
  DECLARE @FileSystemInstance  INT
  DECLARE @DriveCount  INT
  DECLARE @DriveCollection  INT
  DECLARE @Drive  INT
  DECLARE @Property  NVARCHAR(100)    
  DECLARE @DriveLetter  VARCHAR(1)  
  DECLARE @FileSystem VARCHAR(128)
  DECLARE @VolumeName VARCHAR(128)
  DECLARE @IsReady VARCHAR(5)
  
  --Creating a File System Object for getting files or disk info.
  exec sp_OACreate 'Scripting.FileSystemObject', @FileSystemInstance OUT

  --Getting the collection of drives
  exec sp_OAGetProperty @FileSystemInstance,'Drives', @DriveCollection OUT

  --Getting the count of drives from collection
  exec sp_OAGetProperty @DriveCollection,'Count', @DriveCount OUT

  --starting from Drive "A" (ASCII 65) 
  SET @DriveLetter_ASCII_Code = 65
  --to "Z" (ASCII 90)
  WHILE @DriveLetter_ASCII_Code <= 90

  BEGIN

  -- Creating the instance drive from Drive Collection 
  SET @Property = 'item("'+CHAR(@DriveLetter_ASCII_Code)+'")'
  exec sp_OAGetProperty @DriveCollection,@Property, @Drive OUT

  -- Getting the drive letter property
  exec sp_OAGetProperty @Drive,'DriveLetter', @DriveLetter OUT

  IF @DriveLetter = CHAR(@DriveLetter_ASCII_Code)
    BEGIN   
    -- Getting more properties from each drive   
    exec sp_OAGetProperty @Drive,'VolumeName', @VolumeName OUT 
    exec sp_OAGetProperty @Drive,'FileSystem', @FileSystem OUT
    exec sp_OAGetProperty @Drive,'IsReady'  , @IsReady OUT; 
            
   IF @IsReady='True'
     INSERT INTO @DriveList ( [DriveLetter],[FileSystem],[VolumeName] )
     VALUES( @DriveLetter,@FileSystem,@VolumeName)
                             
   END
        -- forward next drive
        SET @DriveLetter_ASCII_Code = @DriveLetter_ASCII_Code +1
  END 
  
  EXEC sp_OADestroy @Drive 
  EXEC sp_OADestroy @DriveCollection

  RETURN
END
GO


-- set drive vars from function

DECLARE @log_drive NVARCHAR(50)
DECLARE @log_path NVARCHAR(50)
DECLARE @data_drive NVARCHAR(50)
DECLARE @data_path NVARCHAR(50)
DECLARE @dbName NVARCHAR(50);

-- set the databse name to "MyDB"
SET @dbName = N'MyDB';

select @log_drive = [DriveLetter]
from [dbo].[ufn_LogicalDiskDrives]()
where Volumename = 'logs'
set @log_path = @log_drive+":\" + @dbName + "_log.ldf"
print @log_path

select @data_drive = [DriveLetter]
from [dbo].[ufn_LogicalDiskDrives]()
where Volumename = 'data'
set @data_path =  @data_drive+":\" + @dbName + "_data.mdf"
print @data_path


-- Create the databse using the dbName defined above

-- Construct the SQL command
DECLARE @sql NVARCHAR(MAX);
SET @sql = N'
CREATE DATABASE ' + QUOTENAME(@dbName) + '
ON PRIMARY 
(
    NAME = ' + QUOTENAME(@dbName + '_Data') + ',
    FILENAME = ''' + @data_path + '''
)
LOG ON
(
    NAME = ' + QUOTENAME(@dbName + '_Log') + ',
    FILENAME = ''' + @log_path + '''
)';

-- Print the SQL command for debugging purposes
PRINT @sql;

-- Execute the SQL command
EXEC sp_executesql @sql;


-- Backup the DB created above 

DECLARE @backup_data_path NVARCHAR(50)
DECLARE @backup_log_path NVARCHAR(50)

set @backup_data_path =  @data_drive+":\" + @dbName +".bak"
set @backup_log_path =  @log_drive+":\" + @dbName +".log"

BACKUP DATABASE @dbName
TO DISK = @backup_data_path ;

BACKUP LOG @dbName 
TO DISK = @backup_log_path ;

GO


-- Now that we have a DB which is backed-up, an AG can be created


--- write connect argument to primary to file
:Out $(TEMP)\primary.temp
PRINT ':connect ' +  @@SERVERNAME + '';
GO
:Out stdout

--- write connect argument to first replica node
DECLARE @sec1 varchar(120) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
:Out $(TEMP)\sec1.temp
PRINT ':connect ' +  @sec1 + '';
GO
:Out stdout

--- write connect argument to second replica node
DECLARE @sec2 varchar(120) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);

:Out $(TEMP)\sec2.temp
PRINT ':connect ' +  @sec2 + '';
GO
:Out stdout

--- write connect argument to third replica node
DECLARE @sec3 varchar(120) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);

:Out $(TEMP)\sec3.temp
PRINT ':connect ' +  @sec3 + '';
GO
:Out stdout

--- write connect argument to fourth replica node
DECLARE @sec4 varchar(120) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

:Out $(TEMP)\sec4.temp
PRINT ':connect ' +  @sec4 + '';
GO
:Out stdout

--- create endpoint on primary
:r $(TEMP)\primary.temp

DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'

DECLARE @DynamicSQL varchar(1000);
DECLARE @CompName varchar(250);
DECLARE @HasMasterKey INT;
SELECT @CompName = CONVERT(SysName, SERVERPROPERTY('MachineName'));
 
-- Only create a master key if it doesn't already exist
 
SELECT @HasMasterKey = is_master_key_encrypted_by_server from sys.databases where name = 'master'
IF (@HasMasterKey = 0)
BEGIN
--Create a MASTER KEY to encrypt the certificate.
SET @DynamicSQL = CONCAT('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ' , QUOTENAME(@StrongPassword, ''''));
EXEC (@DynamicSQL)
END
 
--Create the certificate to authenticate the endpoint
IF EXISTS (SELECT name from sys.certificates WHERE name = QUOTENAME(@CompName + '-Cert'))
BEGIN
SET @DynamicSQL = CONCAT('DROP CERTIFICATE ', QUOTENAME(@CompName + '-Cert'));
EXEC (@DynamicSQL);
END
SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@CompName + '-Cert'), ' WITH SUBJECT = ', QUOTENAME(@CompName, '''')) ;
EXEC (@DynamicSQL);
 
--Create the database mirroring endpoint authenticated by the certificate.
SET @DynamicSQL =
CONCAT('CREATE ENDPOINT [Hadr_endpoint]
STATE = STARTED
AS TCP (LISTENER_PORT = 5022, LISTENER_IP = ALL)
FOR DATABASE_MIRRORING (AUTHENTICATION = CERTIFICATE ',QUOTENAME(@CompName + '-Cert'), ' , ENCRYPTION = REQUIRED ALGORITHM AES, ROLE = ALL)');
EXEC (@DynamicSQL);

SET @DynamicSQL =
N'IF EXISTS(SELECT * FROM sys.server_event_sessions WHERE name=''AlwaysOn_health'')
			BEGIN
			ALTER EVENT SESSION [AlwaysOn_health] ON SERVER WITH (STARTUP_STATE=ON);
			END
			IF NOT EXISTS(SELECT * FROM sys.dm_xe_sessions WHERE name=''AlwaysOn_health'')
			BEGIN
			ALTER EVENT SESSION [AlwaysOn_health] ON SERVER STATE=START;
			END'
EXEC (@DynamicSQL);
 
--Back up the certificate to a common network share for import into other nodes in the cluster
SET @DynamicSQL = CONCAT('BACKUP CERTIFICATE ',QUOTENAME(@CompName + '-Cert'),' To FILE = ', QUOTENAME( @ShareName + '\SQL-' + @CompName + '.cer', ''''));
EXEC (@DynamicSQL);

GO

--- create endpoint on first replica node
:r $(TEMP)\sec1.temp

DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'

DECLARE @DynamicSQL varchar(1000);
DECLARE @CompName varchar(250);
DECLARE @HasMasterKey INT;
SELECT @CompName = CONVERT(SysName, SERVERPROPERTY('MachineName'));
 
-- Only create a master key if it doesn't already exist
 
SELECT @HasMasterKey = is_master_key_encrypted_by_server from sys.databases where name = 'master'
IF (@HasMasterKey = 0)
BEGIN
--Create a MASTER KEY to encrypt the certificate.
SET @DynamicSQL = CONCAT('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ' , QUOTENAME(@StrongPassword, ''''));
EXEC (@DynamicSQL)
END
 
--Create the certificate to authenticate the endpoint
IF EXISTS (SELECT name from sys.certificates WHERE name = QUOTENAME(@CompName + '-Cert'))
BEGIN
SET @DynamicSQL = CONCAT('DROP CERTIFICATE ', QUOTENAME(@CompName + '-Cert'));
EXEC (@DynamicSQL);
END
SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@CompName + '-Cert'), ' WITH SUBJECT = ', QUOTENAME(@CompName, '''')) ;
EXEC (@DynamicSQL);
 
--Create the database mirroring endpoint authenticated by the certificate.
SET @DynamicSQL =
CONCAT('CREATE ENDPOINT [Hadr_endpoint]
STATE = STARTED
AS TCP (LISTENER_PORT = 5022, LISTENER_IP = ALL)
FOR DATABASE_MIRRORING (AUTHENTICATION = CERTIFICATE ',QUOTENAME(@CompName + '-Cert'), ' , ENCRYPTION = REQUIRED ALGORITHM AES, ROLE = ALL)');
EXEC (@DynamicSQL);

SET @DynamicSQL =
N'IF EXISTS(SELECT * FROM sys.server_event_sessions WHERE name=''AlwaysOn_health'')
			BEGIN
			ALTER EVENT SESSION [AlwaysOn_health] ON SERVER WITH (STARTUP_STATE=ON);
			END
			IF NOT EXISTS(SELECT * FROM sys.dm_xe_sessions WHERE name=''AlwaysOn_health'')
			BEGIN
			ALTER EVENT SESSION [AlwaysOn_health] ON SERVER STATE=START;
			END'
EXEC (@DynamicSQL);
 
--Back up the certificate to a common network share for import into other nodes in the cluster
SET @DynamicSQL = CONCAT('BACKUP CERTIFICATE ',QUOTENAME(@CompName + '-Cert'),' To FILE = ', QUOTENAME( @ShareName + '\SQL-' + @CompName + '.cer', ''''));
EXEC (@DynamicSQL);

GO

--- create endpoint on second replica node if exist
DECLARE @sec2 varchar(120) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec2.temp

IF @sec2 IS NOT NULL
BEGIN
	DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
	DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'

	DECLARE @DynamicSQL varchar(1000);
	DECLARE @CompName varchar(250);
	DECLARE @HasMasterKey INT;
	SELECT @CompName = CONVERT(SysName, SERVERPROPERTY('MachineName'));
 
	-- Only create a master key if it doesn't already exist
 
	SELECT @HasMasterKey = is_master_key_encrypted_by_server from sys.databases where name = 'master'
	IF (@HasMasterKey = 0)
	BEGIN
	--Create a MASTER KEY to encrypt the certificate.
	SET @DynamicSQL = CONCAT('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ' , QUOTENAME(@StrongPassword, ''''));
	EXEC (@DynamicSQL)
	END
  
	--Create the certificate to authenticate the endpoint
	IF EXISTS (SELECT name from sys.certificates WHERE name = QUOTENAME(@CompName + '-Cert'))
	BEGIN
	SET @DynamicSQL = CONCAT('DROP CERTIFICATE ', QUOTENAME(@CompName + '-Cert'));
	EXEC (@DynamicSQL);
	END
	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@CompName + '-Cert'), ' WITH SUBJECT = ', QUOTENAME(@CompName, '''')) ;
	EXEC (@DynamicSQL);
 
	--Create the database mirroring endpoint authenticated by the certificate.
	SET @DynamicSQL =
	CONCAT('CREATE ENDPOINT [Hadr_endpoint]
	STATE = STARTED
	AS TCP (LISTENER_PORT = 5022, LISTENER_IP = ALL)
	FOR DATABASE_MIRRORING (AUTHENTICATION = CERTIFICATE ',QUOTENAME(@CompName + '-Cert'), ' , ENCRYPTION = REQUIRED ALGORITHM AES, ROLE = ALL)');
	EXEC (@DynamicSQL);

	SET @DynamicSQL =
	N'IF EXISTS(SELECT * FROM sys.server_event_sessions WHERE name=''AlwaysOn_health'')
				BEGIN
				ALTER EVENT SESSION [AlwaysOn_health] ON SERVER WITH (STARTUP_STATE=ON);
				END
				IF NOT EXISTS(SELECT * FROM sys.dm_xe_sessions WHERE name=''AlwaysOn_health'')
				BEGIN
				ALTER EVENT SESSION [AlwaysOn_health] ON SERVER STATE=START;
				END'
	EXEC (@DynamicSQL);
 
	--Back up the certificate to a common network share for import into other nodes in the cluster
	SET @DynamicSQL = CONCAT('BACKUP CERTIFICATE ',QUOTENAME(@CompName + '-Cert'),' To FILE = ', QUOTENAME( @ShareName + '\SQL-' + @CompName + '.cer', ''''));
	EXEC (@DynamicSQL);

END

GO

--- create endpoint on third replica node if exist
DECLARE @sec3 varchar(120) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec3.temp

IF @sec3 IS NOT NULL
BEGIN
	DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
	DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'

	DECLARE @DynamicSQL varchar(1000);
	DECLARE @CompName varchar(250);
	DECLARE @HasMasterKey INT;
	SELECT @CompName = CONVERT(SysName, SERVERPROPERTY('MachineName'));
 
	-- Only create a master key if it doesn't already exist
 
	SELECT @HasMasterKey = is_master_key_encrypted_by_server from sys.databases where name = 'master'
	IF (@HasMasterKey = 0)
	BEGIN
	--Create a MASTER KEY to encrypt the certificate.
	SET @DynamicSQL = CONCAT('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ' , QUOTENAME(@StrongPassword, ''''));
	EXEC (@DynamicSQL)
	END
 
	--Create the certificate to authenticate the endpoint
	IF EXISTS (SELECT name from sys.certificates WHERE name = QUOTENAME(@CompName + '-Cert'))
	BEGIN
	SET @DynamicSQL = CONCAT('DROP CERTIFICATE ', QUOTENAME(@CompName + '-Cert'));
	EXEC (@DynamicSQL);
	END
	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@CompName + '-Cert'), ' WITH SUBJECT = ', QUOTENAME(@CompName, '''')) ;
	EXEC (@DynamicSQL);
 
	--Create the database mirroring endpoint authenticated by the certificate.
	SET @DynamicSQL =
	CONCAT('CREATE ENDPOINT [Hadr_endpoint]
	STATE = STARTED
	AS TCP (LISTENER_PORT = 5022, LISTENER_IP = ALL)
	FOR DATABASE_MIRRORING (AUTHENTICATION = CERTIFICATE ',QUOTENAME(@CompName + '-Cert'), ' , ENCRYPTION = REQUIRED ALGORITHM AES, ROLE = ALL)');
	EXEC (@DynamicSQL);

	SET @DynamicSQL =
	N'IF EXISTS(SELECT * FROM sys.server_event_sessions WHERE name=''AlwaysOn_health'')
				BEGIN
				ALTER EVENT SESSION [AlwaysOn_health] ON SERVER WITH (STARTUP_STATE=ON);
				END
				IF NOT EXISTS(SELECT * FROM sys.dm_xe_sessions WHERE name=''AlwaysOn_health'')
				BEGIN
				ALTER EVENT SESSION [AlwaysOn_health] ON SERVER STATE=START;
				END'
	EXEC (@DynamicSQL);
 
	--Back up the certificate to a common network share for import into other nodes in the cluster
	SET @DynamicSQL = CONCAT('BACKUP CERTIFICATE ',QUOTENAME(@CompName + '-Cert'),' To FILE = ', QUOTENAME( @ShareName + '\SQL-' + @CompName + '.cer', ''''));
	EXEC (@DynamicSQL);

END

GO

--- create endpoint on fourth replica node if exist
DECLARE @sec4 varchar(120) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec4.temp

IF @sec4 IS NOT NULL
BEGIN
	DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
	DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'

	DECLARE @DynamicSQL varchar(1000);
	DECLARE @CompName varchar(250);
	DECLARE @HasMasterKey INT;
	SELECT @CompName = CONVERT(SysName, SERVERPROPERTY('MachineName'));
 
	-- Only create a master key if it doesn't already exist
 
	SELECT @HasMasterKey = is_master_key_encrypted_by_server from sys.databases where name = 'master'
	IF (@HasMasterKey = 0)
	BEGIN
	--Create a MASTER KEY to encrypt the certificate.
	SET @DynamicSQL = CONCAT('CREATE MASTER KEY ENCRYPTION BY PASSWORD = ' , QUOTENAME(@StrongPassword, ''''));
	EXEC (@DynamicSQL)
	END
 
	--Create the certificate to authenticate the endpoint
	IF EXISTS (SELECT name from sys.certificates WHERE name = QUOTENAME(@CompName + '-Cert'))
	BEGIN
	SET @DynamicSQL = CONCAT('DROP CERTIFICATE ', QUOTENAME(@CompName + '-Cert'));
	EXEC (@DynamicSQL);
	END
	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@CompName + '-Cert'), ' WITH SUBJECT = ', QUOTENAME(@CompName, '''')) ;
	EXEC (@DynamicSQL);
 
	--Create the database mirroring endpoint authenticated by the certificate.
	SET @DynamicSQL =
	CONCAT('CREATE ENDPOINT [Hadr_endpoint]
	STATE = STARTED
	AS TCP (LISTENER_PORT = 5022, LISTENER_IP = ALL)
	FOR DATABASE_MIRRORING (AUTHENTICATION = CERTIFICATE ',QUOTENAME(@CompName + '-Cert'), ' , ENCRYPTION = REQUIRED ALGORITHM AES, ROLE = ALL)');
	EXEC (@DynamicSQL);

	SET @DynamicSQL =
	N'IF EXISTS(SELECT * FROM sys.server_event_sessions WHERE name=''AlwaysOn_health'')
				BEGIN
				ALTER EVENT SESSION [AlwaysOn_health] ON SERVER WITH (STARTUP_STATE=ON);
				END
				IF NOT EXISTS(SELECT * FROM sys.dm_xe_sessions WHERE name=''AlwaysOn_health'')
				BEGIN
				ALTER EVENT SESSION [AlwaysOn_health] ON SERVER STATE=START;
				END'
	EXEC (@DynamicSQL);
 
	--Back up the certificate to a common network share for import into other nodes in the cluster
	SET @DynamicSQL = CONCAT('BACKUP CERTIFICATE ',QUOTENAME(@CompName + '-Cert'),' To FILE = ', QUOTENAME( @ShareName + '\SQL-' + @CompName + '.cer', ''''));
	EXEC (@DynamicSQL);

END

GO

-- Restore SQL certs on primary
:r $(TEMP)\primary.temp

DECLARE @node1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
DECLARE	@node2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @node3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @node4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'
DECLARE @DynamicSQL varchar(1000);
 
SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node1 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
EXEC (@DynamicSQL);

SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node1 + '-User'), ' FOR LOGIN ', QUOTENAME(@node1 + '-Login'));
EXEC (@DynamicSQL);

SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node1 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node1 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node1 + '.cer' , ''''));
EXEC (@DynamicSQL);
 
SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node1 +'-Login'));
EXEC (@DynamicSQL);

IF @node2 is not null
BEGIN
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node2 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node2 + '-User'), ' FOR LOGIN ', QUOTENAME(@node2 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node2 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node2 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node2 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node2 +'-Login'));
	EXEC (@DynamicSQL);
END

IF @node3 is not null
BEGIN
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node3 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node3 + '-User'), ' FOR LOGIN ', QUOTENAME(@node3 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node3 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node3 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node3 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node3 +'-Login'));
	EXEC (@DynamicSQL);
END

IF @node4 is not null
BEGIN
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node4 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node4 + '-User'), ' FOR LOGIN ', QUOTENAME(@node4 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node4 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node4 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node4 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node4 +'-Login'));
	EXEC (@DynamicSQL);
END

GO

-- Restore SQL certs on the first replica node
:r $(TEMP)\sec1.temp

DECLARE @node1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
DECLARE	@node2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @node3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @node4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'
DECLARE @DynamicSQL varchar(1000);
 
SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node1 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
EXEC (@DynamicSQL);

SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node1 + '-User'), ' FOR LOGIN ', QUOTENAME(@node1 + '-Login'));
EXEC (@DynamicSQL);

SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node1 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node1 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node1 + '.cer' , ''''));
EXEC (@DynamicSQL);
 
SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node1 +'-Login'));
EXEC (@DynamicSQL);

IF @node2 is not null
BEGIN
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node2 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node2 + '-User'), ' FOR LOGIN ', QUOTENAME(@node2 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node2 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node2 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node2 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node2 +'-Login'));
	EXEC (@DynamicSQL);
END

IF @node3 is not null
BEGIN
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node3 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node3 + '-User'), ' FOR LOGIN ', QUOTENAME(@node3 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node3 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node3 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node3 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node3 +'-Login'));
	EXEC (@DynamicSQL);
END

IF @node4 is not null
BEGIN
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node4 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node4 + '-User'), ' FOR LOGIN ', QUOTENAME(@node4 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node4 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node4 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node4 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node4 +'-Login'));
	EXEC (@DynamicSQL);
END

GO

-- Restore SQL certs on the second replica node
DECLARE	@sec2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec2.temp

IF @sec2 is not null
BEGIN
	DECLARE @node1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
	DECLARE	@node2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);
	DECLARE @node3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);
	DECLARE @node4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

	DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
	DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'
	DECLARE @DynamicSQL varchar(1000);
 
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node1 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node1 + '-User'), ' FOR LOGIN ', QUOTENAME(@node1 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node1 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node1 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node1 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node1 +'-Login'));
	EXEC (@DynamicSQL);

	IF @node2 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node2 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node2 + '-User'), ' FOR LOGIN ', QUOTENAME(@node2 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node2 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node2 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node2 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node2 +'-Login'));
		EXEC (@DynamicSQL);
	END

	IF @node3 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node3 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node3 + '-User'), ' FOR LOGIN ', QUOTENAME(@node3 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node3 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node3 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node3 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node3 +'-Login'));
		EXEC (@DynamicSQL);
	END

	IF @node4 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node4 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node4 + '-User'), ' FOR LOGIN ', QUOTENAME(@node4 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node4 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node4 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node4 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node4 +'-Login'));
		EXEC (@DynamicSQL);
	END
END

GO

-- Restore SQL certs on the third replica node
DECLARE	@sec3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec3.temp

IF @sec3 is not null
BEGIN
	DECLARE @node1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
	DECLARE	@node2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);
	DECLARE @node3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);
	DECLARE @node4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

	DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
	DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'
	DECLARE @DynamicSQL varchar(1000);
 
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node1 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node1 + '-User'), ' FOR LOGIN ', QUOTENAME(@node1 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node1 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node1 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node1 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node1 +'-Login'));
	EXEC (@DynamicSQL);

	IF @node2 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node2 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node2 + '-User'), ' FOR LOGIN ', QUOTENAME(@node2 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node2 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node2 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node2 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node2 +'-Login'));
		EXEC (@DynamicSQL);
	END

	IF @node3 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node3 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node3 + '-User'), ' FOR LOGIN ', QUOTENAME(@node3 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node3 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node3 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node3 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node3 +'-Login'));
		EXEC (@DynamicSQL);
	END

	IF @node4 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node4 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node4 + '-User'), ' FOR LOGIN ', QUOTENAME(@node4 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node4 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node4 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node4 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node4 +'-Login'));
		EXEC (@DynamicSQL);
	END
END

GO

-- Restore SQL certs on the fourth replica node
DECLARE	@sec4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec4.temp

IF @sec4 is not null
BEGIN
	DECLARE @node1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
	DECLARE	@node2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);
	DECLARE @node3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);
	DECLARE @node4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

	DECLARE @ShareName varchar(250) = 'C:\ClusterStorage\Volume1\SQLCerts'
	DECLARE @StrongPassword varchar(100) = 'P@ssw0rd'
	DECLARE @DynamicSQL varchar(1000);
 
	SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node1 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node1 + '-User'), ' FOR LOGIN ', QUOTENAME(@node1 + '-Login'));
	EXEC (@DynamicSQL);

	SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node1 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node1 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node1 + '.cer' , ''''));
	EXEC (@DynamicSQL);
 
	SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node1 +'-Login'));
	EXEC (@DynamicSQL);

	IF @node2 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node2 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node2 + '-User'), ' FOR LOGIN ', QUOTENAME(@node2 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node2 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node2 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node2 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node2 +'-Login'));
		EXEC (@DynamicSQL);
	END

	IF @node3 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node3 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node3 + '-User'), ' FOR LOGIN ', QUOTENAME(@node3 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node3 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node3 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node3 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node3 +'-Login'));
		EXEC (@DynamicSQL);
	END

	IF @node4 is not null
	BEGIN
		SET @DynamicSQL = CONCAT('CREATE LOGIN ', QUOTENAME (@node4 + '-Login'), ' WITH PASSWORD= ', QUOTENAME( @StrongPassword, ''''));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE USER ', QUOTENAME( @node4 + '-User'), ' FOR LOGIN ', QUOTENAME(@node4 + '-Login'));
		EXEC (@DynamicSQL);

		SET @DynamicSQL = CONCAT('CREATE CERTIFICATE ', QUOTENAME(@node4 +'-Cert'), ' AUTHORIZATION ', QUOTENAME(@node4 +'-User'), ' FROM FILE = ', QUOTENAME(@ShareName + '\SQL-' + @node4 + '.cer' , ''''));
		EXEC (@DynamicSQL);
 
		SET @DynamicSQL = CONCAT('GRANT CONNECT ON ENDPOINT::Hadr_endpoint TO ', QUOTENAME(@node4 +'-Login'));
		EXEC (@DynamicSQL);
	END
END

GO

-- Define nodes
DECLARE @sec1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);
DECLARE	@sec2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @sec3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @sec4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);
DECLARE @AvailabilityGroupName NVARCHAR(128) = 'MyAG';
DECLARE @DatabaseName NVARCHAR(128) = 'MyDB'; 

DECLARE @tsql2 nvarchar(max) 

SET @tsql2 = 
    N'
    CREATE AVAILABILITY GROUP ' + QUOTENAME(@AvailabilityGroupName) + N'
    WITH (AUTOMATED_BACKUP_PREFERENCE = SECONDARY,
    DB_FAILOVER = OFF,
    DTC_SUPPORT = NONE,
    REQUIRED_SYNCHRONIZED_SECONDARIES_TO_COMMIT = 0)
    FOR DATABASE ' + QUOTENAME(@DatabaseName) + N'
    REPLICA ON
        N''' + @@SERVERNAME + N''' WITH (
            ENDPOINT_URL = N''TCP://' + @@SERVERNAME + N':5022'',
            FAILOVER_MODE = AUTOMATIC,
            AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
            BACKUP_PRIORITY = 50, 
            SEEDING_MODE = AUTOMATIC, 
            SECONDARY_ROLE (ALLOW_CONNECTIONS = NO)),
        N''' + @sec1 + N''' WITH (
            ENDPOINT_URL = N''TCP://' + @sec1 + N':5022'',
            FAILOVER_MODE = AUTOMATIC,
            AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
            BACKUP_PRIORITY = 50, 
            SEEDING_MODE = AUTOMATIC, 
            SECONDARY_ROLE (ALLOW_CONNECTIONS = NO))
    '

IF @sec2 is not null SET @tsql2 = @tsql2 + 
		N', N''' + @sec2 + N''' WITH (
			ENDPOINT_URL = N''TCP://' + @sec2 + N':5022'',
			FAILOVER_MODE = AUTOMATIC,
			AVAILABILITY_MODE = SYNCHRONOUS_COMMIT,
			BACKUP_PRIORITY = 50, 
			SEEDING_MODE = AUTOMATIC, 
			SECONDARY_ROLE (ALLOW_CONNECTIONS = NO))
	'

IF @sec3 is not null SET @tsql2 = @tsql2 + 
		N', N''' + @sec3 + N''' WITH (
			ENDPOINT_URL = N''TCP://' + @sec3 + N':5022'',
			FAILOVER_MODE = MANUAL,
			AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,
			BACKUP_PRIORITY = 50, 
			SEEDING_MODE = AUTOMATIC, 
			SECONDARY_ROLE (ALLOW_CONNECTIONS = NO))
	'

IF @sec4 is not null SET @tsql2 = @tsql2 + 
		N', N''' + @sec4 + N''' WITH (
			ENDPOINT_URL = N''TCP://' + @sec4 + N':5022'',
			FAILOVER_MODE = MANUAL,
			AVAILABILITY_MODE = ASYNCHRONOUS_COMMIT,
			BACKUP_PRIORITY = 50, 
			SEEDING_MODE = AUTOMATIC, 
			SECONDARY_ROLE (ALLOW_CONNECTIONS = NO))'

SET @tsql2 = @tsql2 + ';'

-- now create the AG on primary
:r $(TEMP)\primary.temp
PRINT @tsql2;

-- Execute the dynamic SQL command
EXEC sp_executesql @tsql2;

GO

-- Join AG on first replica node
DECLARE @sec1 NVARCHAR(128) = (SELECT TOP 1 member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name);

:r $(TEMP)\sec1.temp

EXEC (N'ALTER AVAILABILITY GROUP [MyAG] JOIN; ALTER AVAILABILITY GROUP [MyAG] GRANT CREATE ANY DATABASE;')

GO

-- Join AG on second replica node
DECLARE	@sec2 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec2.temp

IF @sec2 IS NOT NULL EXEC (N'ALTER AVAILABILITY GROUP [MyAG] JOIN; ALTER AVAILABILITY GROUP [MyAG] GRANT CREATE ANY DATABASE;')

GO

-- Join AG on third replica node
DECLARE @sec3 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 2 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec3.temp

IF @sec3 IS NOT NULL EXEC (N'ALTER AVAILABILITY GROUP [MyAG] JOIN; ALTER AVAILABILITY GROUP [MyAG] GRANT CREATE ANY DATABASE;')

GO

-- Join AG on fourth replica node
DECLARE @sec4 NVARCHAR(128) = (SELECT member_name from master.sys.dm_hadr_cluster_members where member_name like 'sql-%' and member_name not like @@servername order by member_name OFFSET 3 ROWS FETCH NEXT 1 ROWS ONLY);

:r $(TEMP)\sec4.temp

IF @sec4 IS NOT NULL EXEC (N'ALTER AVAILABILITY GROUP [MyAG] JOIN; ALTER AVAILABILITY GROUP [MyAG] GRANT CREATE ANY DATABASE;')

GO

